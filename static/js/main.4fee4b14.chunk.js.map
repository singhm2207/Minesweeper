{"version":3,"sources":["components/Cells/index.js","components/Row/index.js","components/Board/index.js","components/BoardHead/index.js","MinesweeperGame.js","index.js"],"names":["Cell","props","data","isOpen","hasMine","className","onClick","open","onContextMenu","e","preventDefault","count","flag","hasFlag","Row","cells","map","index","key","Board","createBoard","board","i","rows","push","j","columns","x","y","mines","randomRow","Math","floor","random","randomCol","cell","newRows","rowsState","setRowsState","changeFlagAmount","Promise","resolve","findMines","then","noOfMines","current","openCells","openCellClick","findAroundCell","endGame","minesInProximity","row","col","length","useState","rowsEleState","setRowsEleState","useEffect","setRowsStateHelper","status","rowsEle","BoardHead","flagCount","reset","toUpperCase","App","flags","boardState","setBoardState","checkForWinner","useCallback","handleCellClick","prev","amount","ReactDOM","render","StrictMode","MinesweeperGame","document","getElementById"],"mappings":"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","file":"static/js/main.4fee4b14.chunk.js","sourcesContent":["import React from 'react';\r\nconst Cell = props => {\r\n    let renderCell = () => {\r\n        if(props.data.isOpen){\r\n            if(props.data.hasMine){\r\n                return (\r\n                    <div className='cell open' onClick={ () => {props.open(props.data)}} onContextMenu={e => {\r\n                        // don't load that context menu\r\n                        e.preventDefault();\r\n                      }}>\r\n                        <strong>(X)</strong>\r\n                    </div>\r\n                )\r\n            }\r\n            else if (props.data.count === 0){\r\n                return (\r\n                    <div className='cell open' onClick={ () => {props.open(props.data)}} onContextMenu={e => {\r\n                        e.preventDefault();\r\n                        props.flag(props.data);\r\n                      }}>\r\n                    </div>\r\n                )\r\n            }\r\n            else{\r\n                return (\r\n                    <div className='cell open' onClick={ () => {props.open(props.data)}} onContextMenu={e => {\r\n                        e.preventDefault();\r\n                      }}>\r\n                        {props.data.count}\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        else if (props.data.hasFlag) {\r\n            return (\r\n              <div\r\n                className=\"cell\"\r\n                onContextMenu={e => {\r\n                  e.preventDefault();\r\n                  props.flag(props.data);\r\n                }}\r\n                onClick={() => props.open(props.data)}\r\n              >\r\n                <strong>|></strong>\r\n              </div>\r\n            );\r\n          } \r\n        else {\r\n               return( <div className='cell closed'  onClick={() => props.open(props.data)}  onContextMenu={e => {\r\n                e.preventDefault();\r\n                props.flag(props.data);\r\n              }}>\r\n                    \r\n                </div>);\r\n        }\r\n    }\r\n    return renderCell();\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport Cell from '../Cells';\r\nconst Row = props => {\r\n    let cells = props.cells.map((data, index) => {\r\n        return (\r\n            <Cell key={index} data={data} open={props.open} flag={props.flag}/>\r\n        )\r\n    });\r\n    return (\r\n        <div className='row'>\r\n            {cells}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;","import React, { useEffect, useState } from 'react';\r\nimport Row from '../Row';\r\nexport const Board = (props) => {\r\n    //Creates empty board\r\n    const createBoard = props => {\r\n        let board = [];\r\n        for(let i = 0; i < props.rows; i++){\r\n            board.push([]);\r\n            for(let j = 0; j < props.columns; j++){\r\n                board[i].push({\r\n                    x: j,\r\n                    y: i,\r\n                    count: 0,\r\n                    isOpen: false,\r\n                    hasMine: false,\r\n                    hasFlag: false\r\n                });\r\n            }\r\n        }\r\n        // After the board is created, add mines\r\n        for(let i = 0; i < props.mines; i++){\r\n            let randomRow = Math.floor(Math.random() * props.rows); \r\n            let randomCol = Math.floor(Math.random() * props.columns);\r\n            let cell = board[randomRow][randomCol];\r\n            //If the cell already has a mine, go back one and retry\r\n            if(cell.hasMine){\r\n                i--;\r\n            }\r\n            else{\r\n                cell.hasMine = true;\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n    //Updates the flagged status\r\n    const flag = cell => {\r\n        let newRows = [...rowsState];\r\n        cell.hasFlag = !cell.hasFlag;\r\n        newRows[cell.y][cell.x].hasFlag = cell.hasFlag; \r\n        setRowsState(newRows);\r\n        props.changeFlagAmount(cell.hasFlag ? -1 : 1);\r\n    };\r\n    //Opens a closed cell.\r\n    const open = cell => {\r\n        let asyncCountMines = new Promise(resolve => {\r\n            let mines = findMines(cell);\r\n            resolve(mines);\r\n        });\r\n        asyncCountMines.then(noOfMines => {\r\n            let rows = rowsState;\r\n            let current = rows[cell.y][cell.x];\r\n            if(current.hasMine && props.openCells === 0 ){\r\n                let newRows = createBoard(props);\r\n                setRowsState(newRows);\r\n            }\r\n            else{\r\n                if(!cell.hasFlag && !current.isOpen){\r\n                    props.openCellClick();\r\n                    let newRows = [...rows];\r\n                    newRows[cell.y][cell.x].isOpen = true; \r\n                    newRows[cell.y][cell.x].count = noOfMines;\r\n                    setRowsState(newRows);\r\n                    //If the current cell doesn't have mine and noOfMines around is 0, open surrounding cells.\r\n                    if (!newRows[cell.y][cell.x].hasMine && noOfMines === 0) {\r\n                        findAroundCell(cell);\r\n                    }\r\n                    if (current.hasMine && props.openCells !== 0) {\r\n                        props.endGame();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    //Finds surrounding mines.\r\n    const findMines = cell => {\r\n        let minesInProximity = 0;\r\n        for(let row = -1; row <= 1; row++){\r\n            for (let col = -1; col <= 1; col++) {\r\n                if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n                  if (\r\n                    cell.y + row < rowsState.length &&\r\n                    cell.x + col < rowsState[0].length\r\n                  ) {\r\n                    if (\r\n                        rowsState[cell.y + row][cell.x + col].hasMine &&\r\n                      !(row === 0 && col === 0)\r\n                    ) {\r\n                      minesInProximity++;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n        return minesInProximity;\r\n    }\r\n\r\n    const findAroundCell = cell => {\r\n        let rows = [...rowsState];\r\n        // loop through each cell and open cells one by one in each row around it until we find one with a mine in it\r\n        for (let row = -1; row <= 1; row++) {\r\n          for (let col = -1; col <= 1; col++) {\r\n            if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n              if (\r\n                cell.y + row < rowsState.length &&\r\n                cell.x + col < rowsState[0].length\r\n              ) {\r\n                if (\r\n                  !rowsState[cell.y + row][cell.x + col].hasMine &&\r\n                  !rows[cell.y + row][cell.x + col].isOpen\r\n                ) {\r\n                  open(rows[cell.y + row][cell.x + col]);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n    const [rowsState, setRowsState] = useState(null);\r\n    const [rowsEleState, setRowsEleState] = useState(null);\r\n    useEffect(() => {\r\n        if(!rowsState){\r\n            const rows = createBoard(props);\r\n            setRowsState(rows);\r\n            setRowsStateHelper(rows);\r\n        }\r\n        else{\r\n            setRowsStateHelper(rowsState);\r\n        }\r\n    }, [rowsState]);\r\n    useEffect(() => {\r\n        if(props.status === 'waiting'){\r\n            const rows = createBoard(props);\r\n            setRowsState(rows);\r\n            setRowsStateHelper(rows);\r\n        }\r\n    }, [props.status]);\r\n    const setRowsStateHelper = (rows) => {\r\n        const rowsEle = rows.map((row, index) => {\r\n        return (\r\n                <Row \r\n                    cells={row}\r\n                    key={index}\r\n                    open={open}\r\n                    flag={flag}\r\n                />\r\n            );\r\n        });\r\n        setRowsEleState(rowsEle);\r\n    }\r\n    return (\r\n        <div className='board'>\r\n            {rowsEleState}\r\n        </div>\r\n    );\r\n  };\r\n  \r\n  export default Board;\r\n\r\n","import React from 'react';\r\n\r\nconst BoardHead = props => {\r\n    const renderHead = () => {\r\n        if(props.status === 'running'){\r\n            return (\r\n                <div className='board-head'>\r\n            <div className='flag-count'>\r\n            Flags: {props.flagCount}\r\n            </div>\r\n                <button className='reset running' onClick={props.reset}>{props.status.toUpperCase()}</button>\r\n            </div>\r\n            )\r\n        }\r\n        else if(props.status === 'ended'){\r\n            return (\r\n                <div className='board-head'>\r\n            <div className='flag-count'>\r\n            Flags: {props.flagCount}\r\n            </div>\r\n                <button className='reset ended' onClick={props.reset}>{props.status.toUpperCase()}</button>\r\n            </div>\r\n            )\r\n        }\r\n        else if(props.status === 'winner'){\r\n            return (\r\n                <div className='board-head'>\r\n            <div className='flag-count'>\r\n                Flags: {props.flagCount}\r\n            </div>\r\n                <button className='reset winner' onClick={props.reset}>{props.status.toUpperCase()}</button>\r\n            </div>\r\n            )\r\n        }\r\n        else{\r\n            return (\r\n                <div className='board-head'>\r\n            <div className='flag-count'>\r\n            Flags: {props.flagCount}\r\n            </div>\r\n                <button className='reset waiting' onClick={props.reset}>{props.status.toUpperCase()}</button>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    return renderHead();\r\n}\r\n\r\nexport default BoardHead;","import React, { useState, useEffect, useCallback } from 'react';\nimport Board from \"./components/Board\";\nimport BoardHead from \"./components/BoardHead\";\nfunction App() {\n  const [boardState, setBoardState] = useState({\n    status: 'waiting', //waiting, running, ended\n    rows: 10,\n    columns: 10,\n    flags: 10,\n    mines: 10,\n    openCells: 0\n  });\n  const checkForWinner = useCallback(() => {\n    if (boardState.mines + boardState.openCells >= boardState.rows * boardState.columns) {\n      setBoardState({\n        ...boardState,\n        status: \"winner\"\n      })\n    }\n  }, [boardState.openCells]);\n\n  useEffect(() => {\n    if(boardState.status === 'running'){\n      checkForWinner();\n    }\n  }, [boardState.status, checkForWinner]);\n\n  const handleCellClick = useCallback(() => {\n    //increment open cells count by one everytime this function is called.\n    setBoardState(prev => {\n      return { ...boardState, openCells: prev.openCells + 1, status: 'running' };\n    });\n  });\n  const reset = () => {\n    //reset to initial state and change game staus back to waiting.\n    setBoardState({\n      ...boardState,\n      status: 'waiting', //waiting, running, ended\n      rows: 10,\n      columns: 10,\n      flags: 10,\n      mines: 10,\n      openCells: 0\n    });\n  };\n\n  //changes game status to ended\n  const endGame = () => {\n    setBoardState({\n      ...boardState,\n      status: \"ended\"\n    });\n  };\n\n  //keep tracks of number of flags opened and updates depending on passed argument.\n  const changeFlagAmount = amount => {\n    setBoardState({ ...boardState, flags: boardState.flags + amount});\n  };\n  \n  return (\n    <div className=\"minesweeper\">\n      <h1>Minesweeper</h1>\n        <BoardHead flagCount={boardState.flags} reset={reset} status={boardState.status}></BoardHead>\n        <Board rows={boardState.rows} columns={boardState.columns} mines={boardState.mines} status={boardState.status} openCells={boardState.openCells} openCellClick={handleCellClick} endGame={endGame} changeFlagAmount={changeFlagAmount}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MinesweeperGame from './MinesweeperGame';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MinesweeperGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}